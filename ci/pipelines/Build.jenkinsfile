def channel = "testing"
def version = "0.0.0"
def profile = "vs2022.conanprofile"
def packageNameInterface = "RESTAPICore"
def packageNameTestUtilities = "RESTAPICoreTestUtilities"
def archs = ['x86', 'x86_64']
def configs = ['Debug', 'Release']

library identifier: "jenkins-pipeline-utils@1.0.11",
 		retriever: modernSCM([
 			$class: "GitSCMSource",
 			remote: "https://bitbucket.org/Systelab/jenkins-pipeline-utils.git",
 			credentialsId: "BitbucketWerfen"
 		])
   
pipeline
{
	agent
	{
		label 'lib-build'
	}

	parameters
	{
		string(	name: 'tag',
 				description: 'Version to build (must match the version of the tag that will be checked out), leave blank for checkout of current branch',
 				defaultValue: '',
 				trim: true)
 
 		booleanParam( name: 'stable',
 					  description: 'Show if generated library should be uploaded as stable or testing',
 					  defaultValue: false )
 		
 		booleanParam( name: 'uploadPackage',
 					  description: 'Whether or not to upload conan package',
 					  defaultValue: false )
	}

	options
	{
		skipDefaultCheckout(true)
		disableConcurrentBuilds()
		buildDiscarder(logRotator(numToKeepStr: '5'))
	}

	stages
	{
		stage('Checkout')
		{
			steps
			{
				cleanupWorkspace()
 				script 
 				{
 					if (params.tag == '')
 					{
 						checkoutFromGIT()
 					}
 					else
 					{
 						version = params.tag
 						checkoutFromGIT(scm.userRemoteConfigs[0].url, "v${version}", true)
 					}
 					channel = params.stable ? "stable" : "testing"
 				}
			}
		}
		
		stage('Build')
		{	
			steps
			{
				script
				{
					archs.each
						{ arch ->
							configs.each
							{ config ->
								stage("Build ${config}|${arch}")
								{
									def buildFolder = "build/${config}-${arch}"
									bat script: "conan install . --install-folder ${buildFolder} --profile=${profile} -s arch=${arch} -s build_type=${config}", label: 'Installing dependencies'
									bat script: "conan build . --build-folder ${buildFolder}", label: 'Building'		
									bat script: "conan export-pkg . ${packageNameInterface}/${version}@systelab/${channel} --build-folder ${buildFolder} --force", label: "Exporting package ${packageNameInterface}/${version}@systelab/${channel}"
									bat script: "conan export-pkg ./test/${packageNameTestUtilities}/conanfile.py ${packageNameTestUtilities}/${version}@systelab/${channel} --build-folder ${buildFolder} --force", label: "Exporting package ${packageNameTestUtilities}/${version}@systelab/${channel}"
									dir("${buildFolder}/bin/${config}")
									{
										bat "RESTAPICoreTest.exe --gtest_output=xml:RESTAPICoreTest.xml"
									}
							}
						}
					}
				}
			}
		}
		
		stage('Test Packages')
		{
			steps
			{
				script
				{
					archs.each
					{ arch ->
						configs.each
						{ config ->
							bat script: "conan test test_package/conanfile.py ${packageNameInterface}/${version}@systelab/${channel} --profile=${profile} -s arch=${arch} -s build_type=${config}"
							bat script: "conan test test/${packageNameTestUtilities}/test_package/conanfile.py ${packageNameTestUtilities}/${version}@systelab/${channel} --profile=${profile} -s arch=${arch} -s build_type=${config}"
						}
					}
				}
			}
		}

		stage('Deploy')
		{
			when
			{
				expression { params.uploadTestingPkg }
			}
			steps
			{

				bat script: "conan upload ${packageNameInterface}/${version}@systelab/${channel} --all -r systelab-conan-local --force", label: "Uploading ${packageNameInterface} package to Artifactory"
				bat script: "conan upload ${packageNameTestUtilities}/${version}@systelab/${channel} --all -r systelab-conan-local --force", label: "Uploading ${packageNameTestUtilities} package to Artifactory"
			}
		}	
	}
	
	post
	{
		always
		{
			junit allowEmptyResults: true, testResults: "build/**/RESTAPICoreTest.xml"
		}
	}
}